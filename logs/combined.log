{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 11:24:43'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 12:52:33'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 13:10:48'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:10:48'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:10:48'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:10:48'
}
{
  code: 'ER_ACCESS_DENIED_ERROR',
  errno: 1045,
  sqlState: '28000',
  sqlMessage: "Access denied for user 'root'@'localhost' (using password: YES)",
  sql: undefined,
  level: 'error',
  message: "Database connection failed: Access denied for user 'root'@'localhost' (using password: YES)",
  stack: "Error: Access denied for user 'root'@'localhost' (using password: YES)\n" +
    '    at Packet.asError (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\packets\\packet.js:740:17)\n' +
    '    at ClientHandshake.execute (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\commands\\command.js:29:26)\n' +
    '    at PoolConnection.handlePacket (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\base\\connection.js:475:34)\n' +
    '    at PacketParser.onPacket (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\base\\connection.js:93:12)\n' +
    '    at PacketParser.executeStart (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\mysql2\\lib\\base\\connection.js:100:25)\n' +
    '    at Socket.emit (node:events:518:28)\n' +
    '    at addChunk (node:internal/streams/readable:559:12)\n' +
    '    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:390:5)',
  timestamp: '2025-06-27 13:10:48'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 13:11:08'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:11:08'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:11:08'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:11:08'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:11:09'
}
{
  message: 'SIGINT received. Shutting down gracefully...',
  level: 'info',
  timestamp: '2025-06-27 13:11:10'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'SIGINT received. Shutting down gracefully...',
  level: 'info',
  timestamp: '2025-06-27 13:16:58'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 13:40:07'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 13:46:35',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '62ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 13:46:35'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:109:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'user@example.com', password: 'password123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 13:46:35',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:36:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '22ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:36:48'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:121:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:36:48',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:42:45'
}
{
  message: 'Application Error Access token is required',
  stack: 'Error: Access token is required\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\middleware\\auth.middleware.ts:24:22\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\error.handler.ts:105:21\n' +
    '    at Layer.handle [as handle_request] (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:328:13)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Function.handle (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:175:3)\n' +
    '    at router (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:47:12)',
  context: {
    url: '/api/v1/users/login',
    method: 'GET',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:43:31',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:45:45'
}
{
  message: 'Application Error Access token is required',
  stack: 'Error: Access token is required\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\middleware\\auth.middleware.ts:24:22\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\error.handler.ts:105:21\n' +
    '    at Layer.handle [as handle_request] (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:328:13)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Function.handle (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:175:3)\n' +
    '    at router (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:47:12)',
  context: {
    url: '/api/v1/users/login',
    method: 'GET',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:45:47',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:46:01'
}
{
  message: 'Application Error Access token is required',
  stack: 'Error: Access token is required\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\middleware\\auth.middleware.ts:24:22\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\error.handler.ts:105:21\n' +
    '    at Layer.handle [as handle_request] (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:328:13)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Function.handle (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:175:3)\n' +
    '    at router (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:47:12)',
  context: {
    url: '/api/v1/users/login',
    method: 'GET',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:46:03',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:50:34'
}
{
  message: 'Application Error Access token is required',
  stack: 'Error: Access token is required\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\middleware\\auth.middleware.ts:24:22\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\error.handler.ts:105:21\n' +
    '    at Layer.handle [as handle_request] (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:328:13)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Function.handle (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:175:3)\n' +
    '    at router (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\express\\lib\\router\\index.js:47:12)',
  context: {
    url: '/api/v1/users/login',
    method: 'GET',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:50:43',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:51:18',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '35ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:51:18'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:140:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:51:19',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:51:43',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '16ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:51:43'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:140:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:51:43',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:51:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '15ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:51:48'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:140:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:51:48',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:52:42',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '16ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:52:42'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:39:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:140:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:52:42',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:54:06'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:55:01'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:55:04',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '42ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:55:04'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:55:04',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:57:43'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:57:45',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '53ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:57:45'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:57:46',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:58:07'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:58:23'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:58:25',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:58:25'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:58:25',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:59:24'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:59:26',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '63ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:59:26'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:59:26',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:59:41',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '26ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:59:41'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:59:41',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 14:59:49'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 14:59:50',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '59ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 14:59:50'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 14:59:50',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 15:01:10',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '28ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 15:01:10'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 15:01:10',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 15:01:54'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:01:54'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:01:54'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:01:54'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 15:01:55'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 15:01:55'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 15:01:55'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 15:01:55'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 15:01:55'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 15:01:55'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 15:01:57',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '34ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 15:01:57'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 15:01:58',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 15:02:25'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 15:02:31',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '57ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 15:02:31'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 15:02:31',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:00:58'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:00:59',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '53ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:00:59'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:00:59',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:01:12'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:01:13',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '49ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:01:13'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:01:14',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:02:22'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:02:23'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:02:23'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:02:23'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:02:27',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '35ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:02:27'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:02:27',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:03:32'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:03:40',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:03:40'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:03:41',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:04:30',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '22ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:04:30'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:04:31',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:04:44',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '21ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:04:44'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:04:45',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:04:58'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:05:03',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '32ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:05:03'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:05:04',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:05:33'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:05:37',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '48ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:05:37'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:05:37',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:05:48'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:05:49',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '30ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:05:49'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:05:50',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:07:07'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:07:10',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '44ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:07:10'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:07:11',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:33'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:33'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:33'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:07:33'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:07:34'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:07:34'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:07:34'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:07:34'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:07:34'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:07:34'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:07:35',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '35ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:07:35'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:07:36',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:08:28'
}
{
  message: 'SIGINT received. Shutting down gracefully...',
  level: 'info',
  timestamp: '2025-06-27 16:08:31'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:08:35'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:08:38',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:08:38'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:08:39',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:09:16'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:09:43'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:09:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '68ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:09:48'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:09:49',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:10:51'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:10:55',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:10:55'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:10:56',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:13:35'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:13:35'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:13:35'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:13:35'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:13:36'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:13:36'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:13:36'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:13:36'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:13:36'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:13:36'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:13:41',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '47ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:13:41'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:13:41',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:14:21'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'admin@example.com' ],
  timestamp: '2025-06-27 16:14:25',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '46ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:14:25'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:141:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'admin@example.com', password: 'admin123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:14:25',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:14:32'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:15:24',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '47ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:15:24'
}
{
  query: '\n' +
    '      INSERT INTO users (id, email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES (?, ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    '345c550b-a189-4a23-aa6f-f864bbf89e1d',
    'user@example.com',
    '$2a$12$ynFTrT4uu7FhOCAuQeL7VeVe9I3CYsFjgLD1zkhbJH0LnO0vN.puq',
    'John',
    'Doe',
    'user'
  ],
  timestamp: '2025-06-27 16:15:24',
  level: 'info',
  message: 'Executing query'
}
{
  query: '\n' +
    '      INSERT INTO users (id, email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES (?, ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    '345c550b-a189-4a23-aa6f-f864bbf89e1d',
    'user@example.com',
    '$2a$12$ynFTrT4uu7FhOCAuQeL7VeVe9I3CYsFjgLD1zkhbJH0LnO0vN.puq',
    'John',
    'Doe',
    'user'
  ],
  error: "Data truncated for column 'id' at row 1",
  executionTime: '46ms',
  level: 'error',
  message: 'Query execution failed',
  timestamp: '2025-06-27 16:15:24'
}
{
  message: "Application Error Query execution failed: Data truncated for column 'id' at row 1",
  stack: "Error: Query execution failed: Data truncated for column 'id' at row 1\n" +
    '    at Function.database (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:95:12)\n' +
    '    at QueryExecutor.execute (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\db\\query.executor.ts:82:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at UserQuery.create (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.query.ts:32:5)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:41:18)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:15:25',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:16:38'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:16:41',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '47ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:16:41'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$CCscGZ5Ob4fhorYwnenjpOxNP8XQUBc0kOJxep557hnA5sMBys2eW',
    'John',
    'Doe',
    'user'
  ],
  timestamp: '2025-06-27 16:16:41',
  level: 'info',
  message: 'Executing query'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$CCscGZ5Ob4fhorYwnenjpOxNP8XQUBc0kOJxep557hnA5sMBys2eW',
    'John',
    'Doe',
    'user'
  ],
  error: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  executionTime: '22ms',
  level: 'error',
  message: 'Query execution failed',
  timestamp: '2025-06-27 16:16:41'
}
{
  message: "Application Error Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  stack: "Error: Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2\n" +
    '    at Function.database (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:95:12)\n' +
    '    at QueryExecutor.execute (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\db\\query.executor.ts:82:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at UserQuery.create (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.query.ts:34:5)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:41:18)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:16:41',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:17:59'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:18:01',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '46ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:18:01'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$f.AJvuR4oUxXDPCiy8XtaO9lONCPLdgIV4JVvY/JUGu7dK.oDugli',
    'John',
    'Doe',
    '2'
  ],
  timestamp: '2025-06-27 16:18:01',
  level: 'info',
  message: 'Executing query'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$f.AJvuR4oUxXDPCiy8XtaO9lONCPLdgIV4JVvY/JUGu7dK.oDugli',
    'John',
    'Doe',
    '2'
  ],
  error: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  executionTime: '25ms',
  level: 'error',
  message: 'Query execution failed',
  timestamp: '2025-06-27 16:18:01'
}
{
  message: "Application Error Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  stack: "Error: Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2\n" +
    '    at Function.database (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:95:12)\n' +
    '    at QueryExecutor.execute (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\db\\query.executor.ts:82:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at UserQuery.create (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.query.ts:34:5)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:41:18)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:18:01',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:18:29'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:18:31',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '42ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:18:31'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$.S0CIPPW9bpIYxUIqzYwjuoTf/CI/mbyO450g5oDYTmq9Q34o8BCS',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:18:31',
  level: 'info',
  message: 'Executing query'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$.S0CIPPW9bpIYxUIqzYwjuoTf/CI/mbyO450g5oDYTmq9Q34o8BCS',
    'John',
    'Doe',
    2
  ],
  error: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  executionTime: '20ms',
  level: 'error',
  message: 'Query execution failed',
  timestamp: '2025-06-27 16:18:31'
}
{
  message: "Application Error Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2",
  stack: "Error: Query execution failed: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?, ?, ?, ?, ?, TRUE, NOW(), NOW())' at line 2\n" +
    '    at Function.database (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:95:12)\n' +
    '    at QueryExecutor.execute (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\db\\query.executor.ts:82:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at UserQuery.create (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.query.ts:34:5)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:41:18)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:18:31',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:18:59'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:19:01',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '48ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:19:01'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$50pohC1Qa0WpbH4GgH9Su.znFGbmE2XLevkApH7Qi7TuXzGGiVV.i',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:19:02',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '49ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:19:02'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE id = ?\n' +
    '    ',
  params: [ '00728fa1-a652-40f9-ac72-c75bef37d9b8' ],
  timestamp: '2025-06-27 16:19:02',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '52ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:19:02'
}
{
  message: "Application Error Cannot destructure property 'password' of 'user' as it is null.",
  stack: "TypeError: Cannot destructure property 'password' of 'user' as it is null.\n" +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:48:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:19:02',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:16'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:16'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:16'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:16'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:19:17'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:19:17'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:19:17'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:19:17'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:19:17'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:19:17'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:19:19',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '49ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:19:19'
}
{
  message: 'Application Error User with this email already exists',
  stack: 'Error: User with this email already exists\n' +
    '    at Function.conflict (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:75:12)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:34:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:19:19',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:19:35'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-06-27 16:20:00',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '46ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:20:00'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$BdOTNDjx/LnkQaIHbG1g3uhXflxF3jn/ixS54bFyy4CeTQNXgzKk.',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:20:00',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:20:00'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE id = ?\n' +
    '    ',
  params: [ '750250b8-3936-4775-91db-0c77fdd07d23' ],
  timestamp: '2025-06-27 16:20:00',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '41ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:20:00'
}
{
  message: "Application Error Cannot destructure property 'password' of 'user' as it is null.",
  stack: "TypeError: Cannot destructure property 'password' of 'user' as it is null.\n" +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:48:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@example.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:20:00',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:21:19'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@a.com' ],
  timestamp: '2025-06-27 16:21:21',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '44ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:21:21'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@a.com',
    '$2a$12$LTetpJ2Ogac6QZAWkk/gueGoXaM4igAo5ZYt70X2oAmazCYJygrsi',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:21:21',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '42ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:21:21'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE id = ?\n' +
    '    ',
  params: [ 'ee63f126-316b-4885-9937-9be87c80e22b' ],
  timestamp: '2025-06-27 16:21:21',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '40ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:21:21'
}
{
  message: "Application Error Cannot destructure property 'password' of 'user' as it is null.",
  stack: "TypeError: Cannot destructure property 'password' of 'user' as it is null.\n" +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:49:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:21:21',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:22:01'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:22:08'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@a.com' ],
  timestamp: '2025-06-27 16:22:10',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '33ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:22:10'
}
{
  message: 'Application Error User with this email already exists',
  stack: 'Error: User with this email already exists\n' +
    '    at Function.conflict (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:75:12)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:34:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:22:10',
  level: 'error'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@a.com' ],
  timestamp: '2025-06-27 16:22:28',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '17ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:22:28'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@a.com',
    '$2a$12$R9KJjRZ2zqzluWr8efYW/uPHYyyVdu84JcCcRpN47c1hNj6ZU3j4O',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:22:29',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '33ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:22:29'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE id = ?\n' +
    '    ',
  params: [ 'b0c03436-3a3a-4fb0-a1bf-30b4a2459a48' ],
  timestamp: '2025-06-27 16:22:29',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '32ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:22:29'
}
{
  message: "Application Error Cannot destructure property 'password' of 'user' as it is null.",
  stack: "TypeError: Cannot destructure property 'password' of 'user' as it is null.\n" +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:49:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:22:29',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:24:37'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@a.com' ],
  timestamp: '2025-06-27 16:24:42',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '31ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:24:42'
}
{
  message: 'Application Error User with this email already exists',
  stack: 'Error: User with this email already exists\n' +
    '    at Function.conflict (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:75:12)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:34:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'user@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:24:42',
  level: 'error'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-27 16:24:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '14ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:24:48'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'usfer@a.com',
    '$2a$12$eHjwSo1issVH2v0jj37NQebXwacWinhFKMVjyay11Jk1sDzMoj4GC',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:24:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '29ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:24:48'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE id = ?\n' +
    '    ',
  params: [ 'fefdbfe8-c58f-4049-b32c-27363428a278' ],
  timestamp: '2025-06-27 16:24:48',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '28ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:24:48'
}
{
  message: "Application Error Cannot destructure property 'password' of 'user' as it is null.",
  stack: "TypeError: Cannot destructure property 'password' of 'user' as it is null.\n" +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:49:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'usfer@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:24:48',
  level: 'error'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:25:23'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-27 16:26:19'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-27 16:26:24',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '30ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:26:24'
}
{
  message: 'Application Error User with this email already exists',
  stack: 'Error: User with this email already exists\n' +
    '    at Function.conflict (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:75:12)\n' +
    '    at UserService.createUser (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:34:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:22:18',
  context: {
    url: '/api/v1/users/register',
    method: 'POST',
    body: {
      email: 'usfer@a.com',
      password: 'password123',
      firstName: 'John',
      lastName: 'Doe'
    },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:26:24',
  level: 'error'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-27 16:26:51',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '14ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:26:51'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'usfer@a.com',
    '$2a$12$y1UtlTH1Unkx9gC1RzrViO4iQpMOjaJEUIXCjlDr7PZ/o/EH7KaSy',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-06-27 16:26:52',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '30ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:26:52'
}
{
  message: 'Application Error Expected double-quoted property name in JSON at position 73',
  stack: 'SyntaxError: Expected double-quoted property name in JSON at position 73\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at parse (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\body-parser\\lib\\types\\json.js:92:19)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\body-parser\\lib\\read.js:128:18\n' +
    '    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n' +
    '    at invokeCallback (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\raw-body\\index.js:238:16)\n' +
    '    at done (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\raw-body\\index.js:227:7)\n' +
    '    at IncomingMessage.onEnd (C:\\Users\\STATION-02\\Downloads\\123\\project\\node_modules\\raw-body\\index.js:287:7)\n' +
    '    at IncomingMessage.emit (node:events:518:28)\n' +
    '    at endReadableNT (node:internal/streams/readable:1696:12)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: {},
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-27 16:27:23',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-27 16:27:46',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '29ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-27 16:27:46'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-30 10:43:32'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:43:32'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:43:32'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:43:32'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-30 10:43:33'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-30 10:43:33'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-30 10:43:33'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-30 10:43:33'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-30 10:43:33'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-30 10:43:33'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive,\n' +
    '        created_at as createdAt,\n' +
    '        updated_at as updatedAt\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-30 10:43:50',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '46ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-30 10:43:50'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-06-30 10:47:12'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-30 10:47:17',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '45ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-30 10:47:17'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-30 10:50:39',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '23ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-30 10:50:39'
}
{
  message: 'Application Error Invalid email or password',
  stack: 'Error: Invalid email or password\n' +
    '    at Function.unauthorized (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\errors\\AppError.ts:42:12)\n' +
    '    at UserService.login (C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.service.ts:142:22)\n' +
    '    at C:\\Users\\STATION-02\\Downloads\\123\\project\\src\\modules\\user\\user.controller.ts:79:20',
  context: {
    url: '/api/v1/users/login',
    method: 'POST',
    body: { email: 'usfer@a.com', password: 'pasfsword123' },
    params: {},
    query: {},
    user: 'anonymous'
  },
  timestamp: '2025-06-30 10:50:39',
  level: 'error'
}
{
  query: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        email,\n' +
    '        password,\n' +
    '        first_name as firstName,\n' +
    '        last_name as lastName,\n' +
    '        role,\n' +
    '        is_active as isActive\n' +
    '      FROM users \n' +
    '      WHERE email = ?\n' +
    '    ',
  params: [ 'usfer@a.com' ],
  timestamp: '2025-06-30 10:51:30',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '22ms',
  rowCount: 1,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-06-30 10:51:30'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-07-07 13:12:57'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:12:57'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:12:57'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:12:57'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-07-07 13:12:57'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-07-07 13:14:08'
}
{
  query: 'SELECT 1 FROM users WHERE email = ? LIMIT 1',
  params: [ 'user@example.com' ],
  timestamp: '2025-07-07 13:14:10',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '43ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-07-07 13:14:10'
}
{
  query: '\n' +
    '      INSERT INTO users ( email, password, first_name, last_name, role, is_active, created_at, updated_at)\n' +
    '      VALUES  ( ?, ?, ?, ?, ?, TRUE, NOW(), NOW())\n' +
    '    ',
  params: [
    'user@example.com',
    '$2a$12$aARh/15I.boEDpautq/inu2spIaBXsVdH3DqumZ6t4jyPg/HYVDEC',
    'John',
    'Doe',
    2
  ],
  timestamp: '2025-07-07 13:14:11',
  level: 'info',
  message: 'Executing query'
}
{
  executionTime: '44ms',
  rowCount: 0,
  level: 'info',
  message: 'Query executed successfully',
  timestamp: '2025-07-07 13:14:11'
}
{
  message: 'Configuration validated successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'Middleware initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'Routes initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'Error handling initialized successfully',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  host: 'db-mysql-blr1-63974-do-user-16434771-0.c.db.ondigitalocean.com',
  database: 'newDB',
  port: 25060,
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'üöÄ Server is running on port 3000',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'üì± Environment: development',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'üîó API Prefix: /api/v1',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'üåê Health check: http://localhost:3000/api/v1/health',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
{
  message: 'üìñ API info: http://localhost:3000/api/v1',
  level: 'info',
  timestamp: '2025-07-07 13:14:39'
}
